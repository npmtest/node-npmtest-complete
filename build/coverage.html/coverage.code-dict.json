{"/home/travis/build/npmtest/node-npmtest-complete/test.js":"/* istanbul instrument in package npmtest_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-complete/lib.npmtest_complete.js":"/* istanbul instrument in package npmtest_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_complete = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_complete = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-complete/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-complete && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_complete\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_complete.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_complete.rollup.js'] =\n            local.assetsDict['/assets.npmtest_complete.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_complete.__dirname + '/lib.npmtest_complete.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-complete/node_modules/complete/lib/complete.js":"// \n// complete\n// Bash Completion for node.js\n// \n\nvar fs = require('fs');\nvar path = require('path');\n\nvar dir = path.join(process.env.HOME || process.env.USERPROFILE, '.node-completion');\nvar hop = Object.prototype.hasOwnProperty;\nvar bashrc = getRc();\nvar argv = require('optimist').argv;\n\nvar commands;\nvar program;\nvar opt;\nvar words = [];\n// \n// Completion\n// \nfunction complete(options) {\n\n  options = options || {};\n  commands = options.commands || exports.commands || {};\n  opt = options.options || exports.options;\n  program = options.program || exports.program;\n\n  // Ensure scripts\n  ensure(program || getName());\n\n  var argv = process.argv;\n  var index = argv.indexOf('--compgen');\n\n  if (~index) {\n    // Cannot allow any output:\n    process.on('uncaughtException', function() {\n      ;\n    });\n\n    words = argv.slice(index + 1);\n    completeWords();\n\n    // Explanation:\n    // If something asynchronous is happening in a matching\n    // function, we need to stop the module from doing anything\n    // further. This gets caught by the uncaughtException listener\n    // and stops anymore synchronous code from being executed.\n    // Yes, it is hacky.\n    throw 'stop';\n  }\n}\n\nfunction completeWords() {\n\n  var cur = words[words.length-1];\n  var prev = words[words.length-2];\n  var command = commands;\n  var l = words.length;\n  var i = 1;\n  var word;\n  var out;\n\n  // Reduce\n  for (; i < l; i++) {\n    word = words[i];\n    if (Array.isArray(command)) {\n      if (~command.indexOf(word)) {\n        command = true;\n      }\n      break;\n    } else {\n      if (command[word] && hop.call(command, word)) {\n        command = command[word];\n      } else {\n        break;\n      }\n    }\n  }\n\n  if (typeof command === 'function') {\n    // A dynamic match.\n    return command.length > 2\n      ? command(words, prev, cur, output)\n      : command(words, output);\n  } else if (command) {\n    // Already matched\n    if (i === l) {\n      echo(cur);\n      return;\n    }\n\n    // A static/dynamic match.\n    if (command.__exec__) {\n      command.__exec__(words, prev, cur);\n    }\n\n    // A static match.\n    out = match(cur, command);\n    if (out) {\n      echo(out);\n      return;\n    }\n\n    // Resolve position-independent options.\n    // Possibly add dynamic behavior here.\n    out = match(cur, opt);\n    if (out) {\n      echo(out);\n      return;\n    }\n  } else {\n    process.exit(1);\n  }\n}\n\n// \n// Ensure Completion Script and Startup Code\n//\nfunction ensure(program) {\n\n  // These don't need to be done in serial,\n  // so we can make this function more\n  // efficient by going async.\n  \n  ensure.script(program);\n  ensure.rc();\n}\n\nensure.rc = function() {\n\n  var data = '', err, msg = complete.installMessage;\n\n  if (argv.install) {\n    process.stdout.write(source);\n    process.exit(0);\n  }\n  \n  try {\n    data = String(fs.readFileSync(bashrc));\n  }\n  catch(ex) {\n    err = ex;\n  }\n\n  if ((err && err.code === 'ENOENT') || !~data.indexOf('# NODE-COMPLETE')) {\n    data += source;\n\n    if (!msg) {\n      var name = getName();\n      msg = [\n        '',\n        'ATTENTION: Your environment doesn\\'t support auto-complete.',\n        'To enable it, try running the following commands:',\n        '  node ' + name + ' --install >> ' + bashrc,\n        '  source ' + process.env['HOME'] + '/.node-completion/' + name,\n        ''\n      ].join('\\r\\n');\n    }\n\n    throw msg;\n  }\n  \n\n};\n\nensure.script = function(program) {\n\n  var file = path.join(dir, program);\n  var data = completion;\n\n  data = data.replace(/{{NAME}}/g, program);\n\n  fs.stat(dir, function(err) {\n\n    fs.mkdir(dir, 0755, function() {\n      fs.stat(file, function(err) {\n        if (err && err.code === 'ENOENT') {\n          fs.writeFile(file, data);\n        }\n      });\n    });\n  });\n};\n\n// \n// Get RC Filename\n//\nfunction getRc() {\n  if (process.platform !== 'darwin') {\n    return path.join(process.env.HOME || process.env.USERPROFILE, '.bashrc');\n  }\n\n  var files = ['.bash_profile', '.bash_login', '.profile'];\n  var l = files.length;\n  var i = 0;\n  var file;\n\n  for (; i < l; i++) {\n    try {\n      file = path.join(process.env.HOME, files[i]);\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n  }\n\n  // If none exist, create a .bash_profile.\n  return path.join(process.env.HOME, '.bash_profile');\n}\n\n// \n// Get Script Name\n//\nfunction getName() {\n  var argv = process.argv.slice();\n  var file;\n  var cd;\n\n  if (argv[0].slice(-4) === 'node') argv.shift();\n\n  file = argv[0];\n  cd = path.dirname(file);\n\n  try {\n    while (fs.lstatSync(file).isSymbolicLink()) {\n      file = fs.readlinkSync(file);\n      cd = path.resolve(cd, path.dirname(file));\n      file = path.resolve(cd, path.basename(file));\n    }\n  } catch (e) {\n    file = argv[0];\n  }\n\n  return path.basename(file);\n}\n\n// \n// Bash\n//\nvar source = [\n\n  '#',\n  '# NODE-COMPLETE',\n  '# Custom command line tab completion for Node.js',\n  '#',\n  'shopt -s progcomp',\n  'for f in $(command ls ~/.node-completion); do',\n  '  f=\"$HOME/.node-completion/$f\"',\n  '  test -f \"$f\" && . \"$f\"',\n  'done',\n  ''\n].join('\\n');\n\nvar completion = [\n\n  '__{{NAME}}_comp() {',\n  '  COMPREPLY=()',\n  '  COMPREPLY=($({{NAME}} --compgen \"${COMP_WORDS[@]}\"))',\n  '  return 0',\n  '}',\n  '',\n  'complete -F __{{NAME}}_comp {{NAME}} 2>/dev/null',\n  ''\n].join('\\n');\n\n// \n// Helpers\n//\nfunction match(key, list) {\n  if (!list) return;\n\n  var type = typeof list;\n  if (type === 'string') {\n    list = [list];\n  } else if (type === 'object' && !Array.isArray(list)) {\n    list = Object.keys(list);\n  } else if (type !== 'object') {\n    return '';\n  }\n\n  var out = [];\n  var l = list.length;\n  var i = 0;\n\n  for (; i < l; i++) {\n    if (list[i] === '__exec__') continue;\n    if (list[i].indexOf(key) === 0) out.push(list[i]);\n  }\n\n  return out.join(' ');\n}\n\nfunction echo(text) {\n  if (!text) return;\n  process.stdout.write(text + '\\n');\n}\n\nfunction output(key, list) {\n  if (!list) {\n    list = key;\n    key = words[words.length-1];\n  }\n  return echo(match(key, list));\n}\n\n// \n// Callback Style\n// Expose a lower level\n// method of doing things.\n// \n\n// \n// list\n// An array of possible matches.\n// \ncomplete.list = [];\n\n// \n// init\n// Initalize the autocomplete module.\n//\ncomplete.init = function() {\n  ensure(getName());\n\n  var argc = process.argv.indexOf('--compgen');\n\n  if (~argc) {\n    process.on('uncaughtException', function() {\n      ;\n    });\n\n    compgen(process.argv, argc, complete.callback);\n\n    // If there are still any callbacks on the event loop,\n    // we need to kill the current stack immediately.\n    throw 'stop';\n  }\n\n  return this;\n};\n\n// \n// add\n// Echo an array or string.\n//\ncomplete.add = function(opt) {\n  if (Array.isArray(opt)) {\n    opt = opt.join(' ');\n  }\n  // The line feed `echo` adds acts as a\n  // delimiter, so we can always add matches.\n  echo(opt + '');\n};\n\n// \n// callback\n// The user's callback\n// \ncomplete.callback = function(last, args, list) {\n  ;\n};\n\n//\n// installMessage\n//\ncomplete.installMessage = null;\n\n// \n// compgen\n// compgen is somewhat of the program entry point when actively used by\n// a completion listener. it will accept a list of arguments and return\n// a list of potential matches for the last partial argument provided.\n//\nfunction compgen(argl, i, callback) {\n  var arglist = argl[argl.length-1];\n  var reducedlist = [];\n  var lastSelection;\n\n  if (complete.list.length > 0) {\n    complete.list.forEach(function(item) {\n      if (~item.indexOf(arglist)) {\n        reducedlist.push(item);\n      }\n    });\n  }\n\n  echo(reducedlist.join('\\n'));\n\n  if (complete.callback) {\n    lastSelection = argl[argl.length-2];\n    complete.callback(lastSelection, arglist, reducedlist);\n  }\n}\n\n// \n// Expose\n//\nexports = process.platform === 'win32'\n  ? function() {}\n  : complete;\n\nexports.match = match;\nexports.echo = echo;\nexports.output = output;\n\nmodule.exports = exports;\n"}